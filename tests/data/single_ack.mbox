From aaron.ma at canonical.com  Mon Nov 21 05:54:08 2022
From: aaron.ma at canonical.com (Aaron Ma)
Date: Mon, 21 Nov 2022 13:54:08 +0800
Subject: [SRU][OEM-5.17][PATCH 0/4] Mediatek WLAN RZ616(MT7922) SAR table
 control
Message-ID: <20221121055412.3744-1-aaron.ma@canonical.com>

BugLink: https://bugs.launchpad.net/bugs/1997200

[Impact]
In order to make sure the amount of RF energy being absorbed by our
bodies is safe according to the FCCâ€™s guidelines, products must undergo
and pass SAR testing.

[Fix]
Add ACPI SAR table control to pass the testing.

[Test]
the unit is 0.5dBm in following:

Without the SAR table control:
$ sudo cat /sys/kernel/debug/ieee80211/phy0/mt76/txpower_sku | grep -i
user
CCK (user) : N.A N.A N.A N.A
OFDM (user) : 40 40 40 40 40 40 40 40
HT20 (user) : 40 40 40 40 40 40 40 40
HT40 (user) : 40 40 40 40 40 40 40 40 40
VHT20 (user) : 40 40 40 40 40 40 40 40 40 40 0 0
VHT40 (user) : 40 40 40 40 40 40 40 40 40 40 0 0
VHT80 (user) : 40 40 40 40 40 40 40 40 40 40 0 0
VHT160 (user) : 40 40 40 40 40 40 40 40 40 40 0 0
HE26 (user) : 40 40 40 40 40 40 40 40 40 40 40 40
HE52 (user) : 40 40 40 40 40 40 40 40 40 40 40 40
HE106 (user) : 40 40 40 40 40 40 40 40 40 40 40 40
HE242 (user) : 40 40 40 40 40 40 40 40 40 40 40 40
HE484 (user) : 40 40 40 40 40 40 40 40 40 40 40 40
HE996 (user) : 40 40 40 40 40 40 40 40 40 40 40 40
HE996x2 (user) : 40 40 40 40 40 40 40 40 40 40 40 40

After enabled SAR table control:
$ sudo cat /sys/kernel/debug/ieee80211/phy0/mt76/txpower_sku | grep -i
user
CCK (user) : N.A N.A N.A N.A
OFDM (user) : 26 26 26 26 26 26 26 26
HT20 (user) : 26 26 26 26 26 26 26 26
HT40 (user) : 26 26 26 26 26 26 26 26 26
VHT20 (user) : 26 26 26 26 26 26 26 26 26 26 0 0
VHT40 (user) : 26 26 26 26 26 26 26 26 26 26 0 0
VHT80 (user) : 26 26 26 26 26 26 26 26 26 26 0 0
VHT160 (user) : 26 26 26 26 26 26 26 26 26 26 0 0
HE26 (user) : 26 26 26 26 26 26 26 26 26 26 26 26
HE52 (user) : 26 26 26 26 26 26 26 26 26 26 26 26
HE106 (user) : 26 26 26 26 26 26 26 26 26 26 26 26
HE242 (user) : 26 26 26 26 26 26 26 26 26 26 26 26
HE484 (user) : 26 26 26 26 26 26 26 26 26 26 26 26
HE996 (user) : 26 26 26 26 26 26 26 26 26 26 26 26
HE996x2 (user) : 26 26 26 26 26 26 26 26 26 26 26 26

Also done stress test with iperf, all works fine.

[Where problems could occur]
It may break mt7922 driver.

These commits are already in oem-6.0 and unstable.

Dan Carpenter (1):
  wifi: mt76: mt7921: fix use after free in mt7921_acpi_read()

Deren Wu (3):
  mt76: add 6 GHz band support in mt76_sar_freq_ranges
  mt76: mt7921: introduce ACPI SAR support
  mt76: mt7921: introduce ACPI SAR config in tx power

 drivers/net/wireless/mediatek/mt76/mac80211.c |   6 +
 .../wireless/mediatek/mt76/mt7921/Makefile    |   1 +
 .../wireless/mediatek/mt76/mt7921/acpi_sar.c  | 282 ++++++++++++++++++
 .../wireless/mediatek/mt76/mt7921/acpi_sar.h  |  93 ++++++
 .../net/wireless/mediatek/mt76/mt7921/init.c  |   5 +-
 .../net/wireless/mediatek/mt76/mt7921/main.c  |  31 +-
 .../wireless/mediatek/mt76/mt7921/mt7921.h    |  22 ++
 7 files changed, 429 insertions(+), 11 deletions(-)
 create mode 100644 drivers/net/wireless/mediatek/mt76/mt7921/acpi_sar.c
 create mode 100644 drivers/net/wireless/mediatek/mt76/mt7921/acpi_sar.h

-- 
2.34.1



From aaron.ma at canonical.com  Mon Nov 21 05:54:09 2022
From: aaron.ma at canonical.com (Aaron Ma)
Date: Mon, 21 Nov 2022 13:54:09 +0800
Subject: [OEM-5.17][PATCH 1/4] mt76: add 6 GHz band support in
 mt76_sar_freq_ranges
In-Reply-To: <20221121055412.3744-1-aaron.ma@canonical.com>
References: <20221121055412.3744-1-aaron.ma@canonical.com>
Message-ID: <20221121055412.3744-2-aaron.ma@canonical.com>

From: Deren Wu <deren.wu at mediatek.com>

BugLink: https://bugs.launchpad.net/bugs/1997200

Add new frequencies support in mt76_sar_freq_ranges[]
* 5945 - 6165
* 6165 - 6405
* 6405 - 6525
* 6525 - 6705
* 6705 - 6865
* 6865 - 7125

Reviewed-by: Sean Wang <sean.wang at mediatek.com>
Signed-off-by: Deren Wu <deren.wu at mediatek.com>
Signed-off-by: Felix Fietkau <nbd at nbd.name>
(cherry picked from commit 162d5c14ba482934334428b3be972571f0c007b0)
Signed-off-by: Aaron Ma <aaron.ma at canonical.com>
---
 drivers/net/wireless/mediatek/mt76/mac80211.c | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/drivers/net/wireless/mediatek/mt76/mac80211.c b/drivers/net/wireless/mediatek/mt76/mac80211.c
index d17a0503d6404..37a09da358e7c 100644
--- a/drivers/net/wireless/mediatek/mt76/mac80211.c
+++ b/drivers/net/wireless/mediatek/mt76/mac80211.c
@@ -178,6 +178,12 @@ static const struct cfg80211_sar_freq_ranges mt76_sar_freq_ranges[] = {
 	{ .start_freq = 5350, .end_freq = 5470, },
 	{ .start_freq = 5470, .end_freq = 5725, },
 	{ .start_freq = 5725, .end_freq = 5950, },
+	{ .start_freq = 5945, .end_freq = 6165, },
+	{ .start_freq = 6165, .end_freq = 6405, },
+	{ .start_freq = 6405, .end_freq = 6525, },
+	{ .start_freq = 6525, .end_freq = 6705, },
+	{ .start_freq = 6705, .end_freq = 6865, },
+	{ .start_freq = 6865, .end_freq = 7125, },
 };
 
 const struct cfg80211_sar_capa mt76_sar_capa = {
-- 
2.34.1



From aaron.ma at canonical.com  Mon Nov 21 05:54:10 2022
From: aaron.ma at canonical.com (Aaron Ma)
Date: Mon, 21 Nov 2022 13:54:10 +0800
Subject: [OEM-5.17][PATCH 2/4] mt76: mt7921: introduce ACPI SAR support
In-Reply-To: <20221121055412.3744-1-aaron.ma@canonical.com>
References: <20221121055412.3744-1-aaron.ma@canonical.com>
Message-ID: <20221121055412.3744-3-aaron.ma@canonical.com>

From: Deren Wu <deren.wu at mediatek.com>

BugLink: https://bugs.launchpad.net/bugs/1997200

In ACPI SAR enabled device, mt7921 should read power limit in ACPI config.
The limit value would be applied to regular tx power settings in mt76.

Two major functionalities added:
1. Get SAR power table through ACPI.
2. Read power in Dynamic/Geo SAR table for tx power limit.

Table note
MTDS: Dynamic SAR table
MTGS: Geo SAR table
MTCL: Country List table (for 6GHz support)

Reviewed-by: Sean Wang <sean.wang at mediatek.com>
Co-developed-by: Quan Zhou <quan.zhou at mediatek.com>
Signed-off-by: Quan Zhou <quan.zhou at mediatek.com>
Co-developed-by: Ming Yen Hsieh <mingyen.hsieh at mediatek.com>
Signed-off-by: Ming Yen Hsieh <mingyen.hsieh at mediatek.com>
Signed-off-by: Deren Wu <deren.wu at mediatek.com>
Signed-off-by: Felix Fietkau <nbd at nbd.name>
(backported from commit f965333e491e36adb0fa91e389fba8685b704fb6)
[ aaron.ma context adjustments ]
Signed-off-by: Aaron Ma <aaron.ma at canonical.com>
---
 .../wireless/mediatek/mt76/mt7921/Makefile    |   1 +
 .../wireless/mediatek/mt76/mt7921/acpi_sar.c  | 279 ++++++++++++++++++
 .../wireless/mediatek/mt76/mt7921/acpi_sar.h  |  93 ++++++
 .../net/wireless/mediatek/mt76/mt7921/init.c  |   2 +
 .../wireless/mediatek/mt76/mt7921/mt7921.h    |  20 ++
 5 files changed, 395 insertions(+)
 create mode 100644 drivers/net/wireless/mediatek/mt76/mt7921/acpi_sar.c
 create mode 100644 drivers/net/wireless/mediatek/mt76/mt7921/acpi_sar.h

diff --git a/drivers/net/wireless/mediatek/mt76/mt7921/Makefile b/drivers/net/wireless/mediatek/mt76/mt7921/Makefile
index 1187acedfedaf..114491ea0cbcd 100644
--- a/drivers/net/wireless/mediatek/mt76/mt7921/Makefile
+++ b/drivers/net/wireless/mediatek/mt76/mt7921/Makefile
@@ -8,5 +8,6 @@ CFLAGS_trace.o := -I$(src)
 
 mt7921-common-y := mac.o mcu.o main.o init.o debugfs.o trace.o
 mt7921-common-$(CONFIG_NL80211_TESTMODE) += testmode.o
+mt7921-common-$(CONFIG_ACPI) += acpi_sar.o
 mt7921e-y := pci.o pci_mac.o pci_mcu.o dma.o
 mt7921s-y := sdio.o sdio_mac.o sdio_mcu.o
diff --git a/drivers/net/wireless/mediatek/mt76/mt7921/acpi_sar.c b/drivers/net/wireless/mediatek/mt76/mt7921/acpi_sar.c
new file mode 100644
index 0000000000000..be4f07ad3af91
--- /dev/null
+++ b/drivers/net/wireless/mediatek/mt76/mt7921/acpi_sar.c
@@ -0,0 +1,279 @@
+// SPDX-License-Identifier: ISC
+/* Copyright (C) 2022 MediaTek Inc. */
+
+#include <linux/acpi.h>
+#include "mt7921.h"
+
+static int
+mt7921_acpi_read(struct mt7921_dev *dev, u8 *method, u8 **tbl, u32 *len)
+{
+	struct acpi_buffer buf = { ACPI_ALLOCATE_BUFFER, NULL };
+	union acpi_object *sar_root, *sar_unit;
+	struct mt76_dev *mdev = &dev->mt76;
+	acpi_handle root, handle;
+	acpi_status status;
+	u32 i = 0;
+
+	root = ACPI_HANDLE(mdev->dev);
+	if (!root)
+		return -EOPNOTSUPP;
+
+	status = acpi_get_handle(root, method, &handle);
+	if (ACPI_FAILURE(status))
+		return -EIO;
+
+	status = acpi_evaluate_object(handle, NULL, NULL, &buf);
+	if (ACPI_FAILURE(status))
+		return -EIO;
+
+	sar_root = buf.pointer;
+	if (sar_root->type != ACPI_TYPE_PACKAGE ||
+	    sar_root->package.count < 4 ||
+	    sar_root->package.elements[0].type != ACPI_TYPE_INTEGER) {
+		dev_err(mdev->dev, "sar cnt = %d\n",
+			sar_root->package.count);
+		goto free;
+	}
+
+	if (!*tbl) {
+		*tbl = devm_kzalloc(mdev->dev, sar_root->package.count,
+				    GFP_KERNEL);
+		if (!*tbl)
+			goto free;
+	}
+	if (len)
+		*len = sar_root->package.count;
+
+	for (i = 0; i < sar_root->package.count; i++) {
+		sar_unit = &sar_root->package.elements[i];
+
+		if (sar_unit->type != ACPI_TYPE_INTEGER)
+			break;
+		*(*tbl + i) = (u8)sar_unit->integer.value;
+	}
+free:
+	kfree(sar_root);
+
+	return (i == sar_root->package.count) ? 0 : -EINVAL;
+}
+
+/* MTCL : Country List Table for 6G band */
+static int
+mt7921_asar_acpi_read_mtcl(struct mt7921_dev *dev, u8 **table, u8 *version)
+{
+	*version = (mt7921_acpi_read(dev, MT7921_ACPI_MTCL, table, NULL) < 0)
+		   ? 1 : 2;
+	return 0;
+}
+
+/* MTDS : Dynamic SAR Power Table */
+static int
+mt7921_asar_acpi_read_mtds(struct mt7921_dev *dev, u8 **table, u8 version)
+{
+	int len, ret, sarlen, prelen, tblcnt;
+	bool enable;
+
+	ret = mt7921_acpi_read(dev, MT7921_ACPI_MTDS, table, &len);
+	if (ret)
+		return ret;
+
+	/* Table content validation */
+	switch (version) {
+	case 1:
+		enable = ((struct mt7921_asar_dyn *)*table)->enable;
+		sarlen = sizeof(struct mt7921_asar_dyn_limit);
+		prelen = sizeof(struct mt7921_asar_dyn);
+		break;
+	case 2:
+		enable = ((struct mt7921_asar_dyn_v2 *)*table)->enable;
+		sarlen = sizeof(struct mt7921_asar_dyn_limit_v2);
+		prelen = sizeof(struct mt7921_asar_dyn_v2);
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	tblcnt = (len - prelen) / sarlen;
+	if (!enable ||
+	    tblcnt > MT7921_ASAR_MAX_DYN || tblcnt < MT7921_ASAR_MIN_DYN)
+		ret = -EINVAL;
+
+	return ret;
+}
+
+/* MTGS : Geo SAR Power Table */
+static int
+mt7921_asar_acpi_read_mtgs(struct mt7921_dev *dev, u8 **table, u8 version)
+{
+	int len, ret = 0, sarlen, prelen, tblcnt;
+
+	ret = mt7921_acpi_read(dev, MT7921_ACPI_MTGS, table, &len);
+	if (ret)
+		return ret;
+
+	/* Table content validation */
+	switch (version) {
+	case 1:
+		sarlen = sizeof(struct mt7921_asar_geo_limit);
+		prelen = sizeof(struct mt7921_asar_geo);
+		break;
+	case 2:
+		sarlen = sizeof(struct mt7921_asar_geo_limit_v2);
+		prelen = sizeof(struct mt7921_asar_geo_v2);
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	tblcnt = (len - prelen) / sarlen;
+	if (tblcnt > MT7921_ASAR_MAX_GEO || tblcnt < MT7921_ASAR_MIN_GEO)
+		ret = -EINVAL;
+
+	return ret;
+}
+
+int mt7921_init_acpi_sar(struct mt7921_dev *dev)
+{
+	struct mt7921_acpi_sar *asar;
+	int ret;
+
+	asar = devm_kzalloc(dev->mt76.dev, sizeof(*asar), GFP_KERNEL);
+	if (!asar)
+		return -ENOMEM;
+
+	mt7921_asar_acpi_read_mtcl(dev, (u8 **)&asar->countrylist, &asar->ver);
+
+	/* MTDS is mandatory. Return error if table is invalid */
+	ret = mt7921_asar_acpi_read_mtds(dev, (u8 **)&asar->dyn, asar->ver);
+	if (ret) {
+		devm_kfree(dev->mt76.dev, asar->dyn);
+		devm_kfree(dev->mt76.dev, asar->countrylist);
+		devm_kfree(dev->mt76.dev, asar);
+		return ret;
+	}
+
+	/* MTGS is optional */
+	ret = mt7921_asar_acpi_read_mtgs(dev, (u8 **)&asar->geo, asar->ver);
+	if (ret) {
+		devm_kfree(dev->mt76.dev, asar->geo);
+		asar->geo = NULL;
+	}
+
+	dev->phy.acpisar = asar;
+
+	return 0;
+}
+
+static s8
+mt7921_asar_get_geo_pwr(struct mt7921_phy *phy,
+			enum nl80211_band band, s8 dyn_power)
+{
+	struct mt7921_acpi_sar *asar = phy->acpisar;
+	struct mt7921_asar_geo_band *band_pwr;
+	s8 geo_power;
+	u8 idx, max;
+
+	if (!asar->geo)
+		return dyn_power;
+
+	switch (phy->mt76->dev->region) {
+	case NL80211_DFS_FCC:
+		idx = 0;
+		break;
+	case NL80211_DFS_ETSI:
+		idx = 1;
+		break;
+	default: /* WW */
+		idx = 2;
+		break;
+	}
+
+	if (asar->ver == 1) {
+		band_pwr = &asar->geo->tbl[idx].band[0];
+		max = ARRAY_SIZE(asar->geo->tbl[idx].band);
+	} else {
+		band_pwr = &asar->geo_v2->tbl[idx].band[0];
+		max = ARRAY_SIZE(asar->geo_v2->tbl[idx].band);
+	}
+
+	switch (band) {
+	case NL80211_BAND_2GHZ:
+		idx = 0;
+		break;
+	case NL80211_BAND_5GHZ:
+		idx = 1;
+		break;
+	case NL80211_BAND_6GHZ:
+		idx = 2;
+		break;
+	default:
+		return dyn_power;
+	}
+
+	if (idx >= max)
+		return dyn_power;
+
+	geo_power = (band_pwr + idx)->pwr;
+	dyn_power += (band_pwr + idx)->offset;
+
+	return min(geo_power, dyn_power);
+}
+
+static s8
+mt7921_asar_range_pwr(struct mt7921_phy *phy,
+		      const struct cfg80211_sar_freq_ranges *range,
+		      u8 idx)
+{
+	const struct cfg80211_sar_capa *capa = phy->mt76->hw->wiphy->sar_capa;
+	struct mt7921_acpi_sar *asar = phy->acpisar;
+	u8 *limit, band, max;
+
+	if (!capa)
+		return 127;
+
+	if (asar->ver == 1) {
+		limit = &asar->dyn->tbl[0].frp[0];
+		max = ARRAY_SIZE(asar->dyn->tbl[0].frp);
+	} else {
+		limit = &asar->dyn_v2->tbl[0].frp[0];
+		max = ARRAY_SIZE(asar->dyn_v2->tbl[0].frp);
+	}
+
+	if (idx >= max)
+		return 127;
+
+	if (range->start_freq >= 5945)
+		band = NL80211_BAND_6GHZ;
+	else if (range->start_freq >= 5150)
+		band = NL80211_BAND_5GHZ;
+	else
+		band = NL80211_BAND_2GHZ;
+
+	return mt7921_asar_get_geo_pwr(phy, band, limit[idx]);
+}
+
+int mt7921_init_acpi_sar_power(struct mt7921_phy *phy, bool set_default)
+{
+	const struct cfg80211_sar_capa *capa = phy->mt76->hw->wiphy->sar_capa;
+	int i;
+
+	if (!phy->acpisar)
+		return 0;
+
+	/* When ACPI SAR enabled in HW, we should apply rules for .frp
+	 * 1. w/o .sar_specs : set ACPI SAR power as the defatul value
+	 * 2. w/  .sar_specs : set power with min(.sar_specs, ACPI_SAR)
+	 */
+	for (i = 0; i < capa->num_freq_ranges; i++) {
+		struct mt76_freq_range_power *frp = &phy->mt76->frp[i];
+
+		frp->range = set_default ? &capa->freq_ranges[i] : frp->range;
+		if (!frp->range)
+			continue;
+
+		frp->power = min_t(s8, set_default ? 127 : frp->power,
+				   mt7921_asar_range_pwr(phy, frp->range, i));
+	}
+
+	return 0;
+}
diff --git a/drivers/net/wireless/mediatek/mt76/mt7921/acpi_sar.h b/drivers/net/wireless/mediatek/mt76/mt7921/acpi_sar.h
new file mode 100644
index 0000000000000..23f86bfae0c05
--- /dev/null
+++ b/drivers/net/wireless/mediatek/mt76/mt7921/acpi_sar.h
@@ -0,0 +1,93 @@
+/* SPDX-License-Identifier: ISC */
+/* Copyright (C) 2022 MediaTek Inc. */
+
+#ifndef __MT7921_ACPI_SAR_H
+#define __MT7921_ACPI_SAR_H
+
+#define MT7921_ASAR_MIN_DYN		1
+#define MT7921_ASAR_MAX_DYN		8
+#define MT7921_ASAR_MIN_GEO		3
+#define MT7921_ASAR_MAX_GEO		8
+
+#define MT7921_ACPI_MTCL		"MTCL"
+#define MT7921_ACPI_MTDS		"MTDS"
+#define MT7921_ACPI_MTGS		"MTGS"
+
+struct mt7921_asar_dyn_limit {
+	u8 idx;
+	u8 frp[5];
+} __packed;
+
+struct mt7921_asar_dyn {
+	u8 names[4];
+	u8 enable;
+	u8 nr_tbl;
+	struct mt7921_asar_dyn_limit tbl[0];
+} __packed;
+
+struct mt7921_asar_dyn_limit_v2 {
+	u8 idx;
+	u8 frp[11];
+} __packed;
+
+struct mt7921_asar_dyn_v2 {
+	u8 names[4];
+	u8 enable;
+	u8 rsvd;
+	u8 nr_tbl;
+	struct mt7921_asar_dyn_limit_v2 tbl[0];
+} __packed;
+
+struct mt7921_asar_geo_band {
+	u8 pwr;
+	u8 offset;
+} __packed;
+
+struct mt7921_asar_geo_limit {
+	u8 idx;
+	/* 0:2G, 1:5G */
+	struct mt7921_asar_geo_band band[2];
+} __packed;
+
+struct mt7921_asar_geo {
+	u8 names[4];
+	u8 version;
+	u8 nr_tbl;
+	struct mt7921_asar_geo_limit tbl[0];
+} __packed;
+
+struct mt7921_asar_geo_limit_v2 {
+	u8 idx;
+	/* 0:2G, 1:5G, 2:6G */
+	struct mt7921_asar_geo_band band[3];
+} __packed;
+
+struct mt7921_asar_geo_v2 {
+	u8 names[4];
+	u8 version;
+	u8 rsvd;
+	u8 nr_tbl;
+	struct mt7921_asar_geo_limit_v2 tbl[0];
+} __packed;
+
+struct mt7921_asar_cl {
+	u8 names[4];
+	u8 version;
+	u8 mode_6g;
+	u8 cl6g[6];
+} __packed;
+
+struct mt7921_acpi_sar {
+	u8 ver;
+	union {
+		struct mt7921_asar_dyn *dyn;
+		struct mt7921_asar_dyn_v2 *dyn_v2;
+	};
+	union {
+		struct mt7921_asar_geo *geo;
+		struct mt7921_asar_geo_v2 *geo_v2;
+	};
+	struct mt7921_asar_cl *countrylist;
+};
+
+#endif
diff --git a/drivers/net/wireless/mediatek/mt76/mt7921/init.c b/drivers/net/wireless/mediatek/mt76/mt7921/init.c
index d16baa517d256..5d036d3f81879 100644
--- a/drivers/net/wireless/mediatek/mt76/mt7921/init.c
+++ b/drivers/net/wireless/mediatek/mt76/mt7921/init.c
@@ -245,6 +245,8 @@ int mt7921_register_device(struct mt7921_dev *dev)
 	if (mt76_is_sdio(&dev->mt76))
 		hw->extra_tx_headroom += MT_SDIO_TXD_SIZE + MT_SDIO_HDR_SIZE;
 
+	mt7921_init_acpi_sar(dev);
+
 	ret = mt7921_init_hardware(dev);
 	if (ret)
 		return ret;
diff --git a/drivers/net/wireless/mediatek/mt76/mt7921/mt7921.h b/drivers/net/wireless/mediatek/mt76/mt7921/mt7921.h
index 31c4adbb19c55..41c4167f48fed 100644
--- a/drivers/net/wireless/mediatek/mt76/mt7921/mt7921.h
+++ b/drivers/net/wireless/mediatek/mt76/mt7921/mt7921.h
@@ -8,6 +8,7 @@
 #include <linux/ktime.h>
 #include "../mt76_connac_mcu.h"
 #include "regs.h"
+#include "acpi_sar.h"
 
 #define MT7921_MAX_INTERFACES		4
 #define MT7921_MAX_WMM_SETS		4
@@ -176,6 +177,9 @@ struct mt7921_phy {
 
 	struct sk_buff_head scan_event_list;
 	struct delayed_work scan_work;
+#ifdef CONFIG_ACPI
+	struct mt7921_acpi_sar *acpisar;
+#endif
 };
 
 #define mt7921_init_reset(dev)		((dev)->hif_ops->init_reset(dev))
@@ -472,4 +476,20 @@ int mt7921_mcu_uni_add_beacon_offload(struct mt7921_dev *dev,
 				      struct ieee80211_hw *hw,
 				      struct ieee80211_vif *vif,
 				      bool enable);
+#ifdef CONFIG_ACPI
+int mt7921_init_acpi_sar(struct mt7921_dev *dev);
+int mt7921_init_acpi_sar_power(struct mt7921_phy *phy, bool set_default);
+#else
+static inline int
+mt7921_init_acpi_sar(struct mt7921_dev *dev)
+{
+	return 0;
+}
+
+static inline int
+mt7921_init_acpi_sar_power(struct mt7921_phy *phy, bool set_default)
+{
+	return 0;
+}
+#endif
 #endif
-- 
2.34.1



From aaron.ma at canonical.com  Mon Nov 21 05:54:11 2022
From: aaron.ma at canonical.com (Aaron Ma)
Date: Mon, 21 Nov 2022 13:54:11 +0800
Subject: [OEM-5.17][PATCH 3/4] mt76: mt7921: introduce ACPI SAR config in tx
 power
In-Reply-To: <20221121055412.3744-1-aaron.ma@canonical.com>
References: <20221121055412.3744-1-aaron.ma@canonical.com>
Message-ID: <20221121055412.3744-4-aaron.ma@canonical.com>

From: Deren Wu <deren.wu at mediatek.com>

BugLink: https://bugs.launchpad.net/bugs/1997200

Add new function mt7921_set_tx_sar_pwr() to update SAR power from
.set_sar_specs and ACPI setting. Both settings would be merged into
mt76_freq_range_power for final tx power value.

Reviewed-by: Sean Wang <sean.wang at mediatek.com>
Co-developed-by: Ming Yen Hsieh <mingyen.hsieh at mediatek.com>
Signed-off-by: Ming Yen Hsieh <mingyen.hsieh at mediatek.com>
Signed-off-by: Deren Wu <deren.wu at mediatek.com>
Signed-off-by: Felix Fietkau <nbd at nbd.name>
(backported from commit 63db9d4012af63b4cc8175ceb8eae8bcf6a8e8f3)
[ aaron.ma context adjustments ]
Signed-off-by: Aaron Ma <aaron.ma at canonical.com>
---
 .../net/wireless/mediatek/mt76/mt7921/init.c  |  3 +-
 .../net/wireless/mediatek/mt76/mt7921/main.c  | 31 +++++++++++++------
 .../wireless/mediatek/mt76/mt7921/mt7921.h    |  2 ++
 3 files changed, 25 insertions(+), 11 deletions(-)

diff --git a/drivers/net/wireless/mediatek/mt76/mt7921/init.c b/drivers/net/wireless/mediatek/mt76/mt7921/init.c
index 5d036d3f81879..502885f7f8048 100644
--- a/drivers/net/wireless/mediatek/mt76/mt7921/init.c
+++ b/drivers/net/wireless/mediatek/mt76/mt7921/init.c
@@ -34,14 +34,13 @@ mt7921_regd_notifier(struct wiphy *wiphy,
 {
 	struct ieee80211_hw *hw = wiphy_to_ieee80211_hw(wiphy);
 	struct mt7921_dev *dev = mt7921_hw_dev(hw);
-	struct mt7921_phy *phy = mt7921_hw_phy(hw);
 
 	memcpy(dev->mt76.alpha2, request->alpha2, sizeof(dev->mt76.alpha2));
 	dev->mt76.region = request->dfs_region;
 
 	mt7921_mutex_acquire(dev);
 	mt76_connac_mcu_set_channel_domain(hw->priv);
-	mt76_connac_mcu_set_rate_txpower(phy->mt76);
+	mt7921_set_tx_sar_pwr(hw, NULL);
 	mt7921_mutex_release(dev);
 }
 
diff --git a/drivers/net/wireless/mediatek/mt76/mt7921/main.c b/drivers/net/wireless/mediatek/mt76/mt7921/main.c
index bf07eabc5d105..abc379a18e075 100644
--- a/drivers/net/wireless/mediatek/mt76/mt7921/main.c
+++ b/drivers/net/wireless/mediatek/mt76/mt7921/main.c
@@ -256,7 +256,7 @@ int __mt7921_start(struct mt7921_phy *phy)
 	if (err)
 		return err;
 
-	err = mt76_connac_mcu_set_rate_txpower(phy->mt76);
+	err = mt7921_set_tx_sar_pwr(mphy->hw, NULL);
 	if (err)
 		return err;
 
@@ -501,7 +501,7 @@ static int mt7921_config(struct ieee80211_hw *hw, u32 changed)
 	mt7921_mutex_acquire(dev);
 
 	if (changed & IEEE80211_CONF_CHANGE_POWER) {
-		ret = mt76_connac_mcu_set_rate_txpower(phy->mt76);
+		ret = mt7921_set_tx_sar_pwr(hw, NULL);
 		if (ret)
 			goto out;
 	}
@@ -1360,20 +1360,33 @@ static void mt7921_sta_set_decap_offload(struct ieee80211_hw *hw,
 					     MCU_UNI_CMD(STA_REC_UPDATE));
 }
 
+int mt7921_set_tx_sar_pwr(struct ieee80211_hw *hw,
+			  const struct cfg80211_sar_specs *sar)
+{
+	struct mt76_phy *mphy = hw->priv;
+	int err;
+
+	if (sar) {
+		err = mt76_init_sar_power(hw, sar);
+		if (err)
+			return err;
+	}
+
+	mt7921_init_acpi_sar_power(mt7921_hw_phy(hw), !sar);
+
+	err = mt76_connac_mcu_set_rate_txpower(mphy);
+
+	return err;
+}
+
 static int mt7921_set_sar_specs(struct ieee80211_hw *hw,
 				const struct cfg80211_sar_specs *sar)
 {
 	struct mt7921_dev *dev = mt7921_hw_dev(hw);
-	struct mt76_phy *mphy = hw->priv;
 	int err;
 
 	mt7921_mutex_acquire(dev);
-	err = mt76_init_sar_power(hw, sar);
-	if (err)
-		goto out;
-
-	err = mt76_connac_mcu_set_rate_txpower(mphy);
-out:
+	err = mt7921_set_tx_sar_pwr(hw, sar);
 	mt7921_mutex_release(dev);
 
 	return err;
diff --git a/drivers/net/wireless/mediatek/mt76/mt7921/mt7921.h b/drivers/net/wireless/mediatek/mt76/mt7921/mt7921.h
index 41c4167f48fed..9de24027c2c5d 100644
--- a/drivers/net/wireless/mediatek/mt76/mt7921/mt7921.h
+++ b/drivers/net/wireless/mediatek/mt76/mt7921/mt7921.h
@@ -492,4 +492,6 @@ mt7921_init_acpi_sar_power(struct mt7921_phy *phy, bool set_default)
 	return 0;
 }
 #endif
+int mt7921_set_tx_sar_pwr(struct ieee80211_hw *hw,
+			  const struct cfg80211_sar_specs *sar);
 #endif
-- 
2.34.1



From aaron.ma at canonical.com  Mon Nov 21 05:54:12 2022
From: aaron.ma at canonical.com (Aaron Ma)
Date: Mon, 21 Nov 2022 13:54:12 +0800
Subject: [OEM-5.17][PATCH 4/4] wifi: mt76: mt7921: fix use after free in
 mt7921_acpi_read()
In-Reply-To: <20221121055412.3744-1-aaron.ma@canonical.com>
References: <20221121055412.3744-1-aaron.ma@canonical.com>
Message-ID: <20221121055412.3744-5-aaron.ma@canonical.com>

From: Dan Carpenter <dan.carpenter at oracle.com>

BugLink: https://bugs.launchpad.net/bugs/1997200

Don't dereference "sar_root" after it has been freed.

Fixes: f965333e491e ("mt76: mt7921: introduce ACPI SAR support")
Signed-off-by: Dan Carpenter <dan.carpenter at oracle.com>
Signed-off-by: Felix Fietkau <nbd at nbd.name>
(cherry picked from commit e7de4b4979bd8d313ec837931dde936653ca82ea)
Signed-off-by: Aaron Ma <aaron.ma at canonical.com>
---
 drivers/net/wireless/mediatek/mt76/mt7921/acpi_sar.c | 5 ++++-
 1 file changed, 4 insertions(+), 1 deletion(-)

diff --git a/drivers/net/wireless/mediatek/mt76/mt7921/acpi_sar.c b/drivers/net/wireless/mediatek/mt76/mt7921/acpi_sar.c
index be4f07ad3af91..47e034a9b0037 100644
--- a/drivers/net/wireless/mediatek/mt76/mt7921/acpi_sar.c
+++ b/drivers/net/wireless/mediatek/mt76/mt7921/acpi_sar.c
@@ -13,6 +13,7 @@ mt7921_acpi_read(struct mt7921_dev *dev, u8 *method, u8 **tbl, u32 *len)
 	acpi_handle root, handle;
 	acpi_status status;
 	u32 i = 0;
+	int ret;
 
 	root = ACPI_HANDLE(mdev->dev);
 	if (!root)
@@ -52,9 +53,11 @@ mt7921_acpi_read(struct mt7921_dev *dev, u8 *method, u8 **tbl, u32 *len)
 		*(*tbl + i) = (u8)sar_unit->integer.value;
 	}
 free:
+	ret = (i == sar_root->package.count) ? 0 : -EINVAL;
+
 	kfree(sar_root);
 
-	return (i == sar_root->package.count) ? 0 : -EINVAL;
+	return ret;
 }
 
 /* MTCL : Country List Table for 6G band */
-- 
2.34.1



From tim.gardner at canonical.com  Tue Nov 22 19:19:51 2022
From: tim.gardner at canonical.com (Tim Gardner)
Date: Tue, 22 Nov 2022 12:19:51 -0700
Subject: ACK: [SRU][OEM-5.17][PATCH 0/4] Mediatek WLAN RZ616(MT7922) SAR table
 control
In-Reply-To: <20221121055412.3744-1-aaron.ma@canonical.com>
References: <20221121055412.3744-1-aaron.ma@canonical.com>
Message-ID: <3b577d2d-6d40-c7c2-5fce-93602c17c712@canonical.com>

On 11/20/22 10:54 PM, Aaron Ma wrote:
> BugLink: https://bugs.launchpad.net/bugs/1997200
> 
> [Impact]
> In order to make sure the amount of RF energy being absorbed by our
> bodies is safe according to the FCCâ€™s guidelines, products must undergo
> and pass SAR testing.
> 
> [Fix]
> Add ACPI SAR table control to pass the testing.
> 
> [Test]
> the unit is 0.5dBm in following:
> 
> Without the SAR table control:
> $ sudo cat /sys/kernel/debug/ieee80211/phy0/mt76/txpower_sku | grep -i
> user
> CCK (user) : N.A N.A N.A N.A
> OFDM (user) : 40 40 40 40 40 40 40 40
> HT20 (user) : 40 40 40 40 40 40 40 40
> HT40 (user) : 40 40 40 40 40 40 40 40 40
> VHT20 (user) : 40 40 40 40 40 40 40 40 40 40 0 0
> VHT40 (user) : 40 40 40 40 40 40 40 40 40 40 0 0
> VHT80 (user) : 40 40 40 40 40 40 40 40 40 40 0 0
> VHT160 (user) : 40 40 40 40 40 40 40 40 40 40 0 0
> HE26 (user) : 40 40 40 40 40 40 40 40 40 40 40 40
> HE52 (user) : 40 40 40 40 40 40 40 40 40 40 40 40
> HE106 (user) : 40 40 40 40 40 40 40 40 40 40 40 40
> HE242 (user) : 40 40 40 40 40 40 40 40 40 40 40 40
> HE484 (user) : 40 40 40 40 40 40 40 40 40 40 40 40
> HE996 (user) : 40 40 40 40 40 40 40 40 40 40 40 40
> HE996x2 (user) : 40 40 40 40 40 40 40 40 40 40 40 40
> 
> After enabled SAR table control:
> $ sudo cat /sys/kernel/debug/ieee80211/phy0/mt76/txpower_sku | grep -i
> user
> CCK (user) : N.A N.A N.A N.A
> OFDM (user) : 26 26 26 26 26 26 26 26
> HT20 (user) : 26 26 26 26 26 26 26 26
> HT40 (user) : 26 26 26 26 26 26 26 26 26
> VHT20 (user) : 26 26 26 26 26 26 26 26 26 26 0 0
> VHT40 (user) : 26 26 26 26 26 26 26 26 26 26 0 0
> VHT80 (user) : 26 26 26 26 26 26 26 26 26 26 0 0
> VHT160 (user) : 26 26 26 26 26 26 26 26 26 26 0 0
> HE26 (user) : 26 26 26 26 26 26 26 26 26 26 26 26
> HE52 (user) : 26 26 26 26 26 26 26 26 26 26 26 26
> HE106 (user) : 26 26 26 26 26 26 26 26 26 26 26 26
> HE242 (user) : 26 26 26 26 26 26 26 26 26 26 26 26
> HE484 (user) : 26 26 26 26 26 26 26 26 26 26 26 26
> HE996 (user) : 26 26 26 26 26 26 26 26 26 26 26 26
> HE996x2 (user) : 26 26 26 26 26 26 26 26 26 26 26 26
> 
> Also done stress test with iperf, all works fine.
> 
> [Where problems could occur]
> It may break mt7922 driver.
> 
> These commits are already in oem-6.0 and unstable.
> 
> Dan Carpenter (1):
>    wifi: mt76: mt7921: fix use after free in mt7921_acpi_read()
> 
> Deren Wu (3):
>    mt76: add 6 GHz band support in mt76_sar_freq_ranges
>    mt76: mt7921: introduce ACPI SAR support
>    mt76: mt7921: introduce ACPI SAR config in tx power
> 
>   drivers/net/wireless/mediatek/mt76/mac80211.c |   6 +
>   .../wireless/mediatek/mt76/mt7921/Makefile    |   1 +
>   .../wireless/mediatek/mt76/mt7921/acpi_sar.c  | 282 ++++++++++++++++++
>   .../wireless/mediatek/mt76/mt7921/acpi_sar.h  |  93 ++++++
>   .../net/wireless/mediatek/mt76/mt7921/init.c  |   5 +-
>   .../net/wireless/mediatek/mt76/mt7921/main.c  |  31 +-
>   .../wireless/mediatek/mt76/mt7921/mt7921.h    |  22 ++
>   7 files changed, 429 insertions(+), 11 deletions(-)
>   create mode 100644 drivers/net/wireless/mediatek/mt76/mt7921/acpi_sar.c
>   create mode 100644 drivers/net/wireless/mediatek/mt76/mt7921/acpi_sar.h
> 
Acked-by: Tim Gardner <tim.gardner at canonical.com>
-- 
-----------
Tim Gardner
Canonical, Inc